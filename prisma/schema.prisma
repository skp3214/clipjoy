
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  likes         Like[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id           String   @id @default(cuid())
  title        String
  description  String
  videoData    Bytes?   // Store video as binary data
  videoUrl     String?  // Keep URL as fallback for existing videos
  thumbnailUrl String?
  mimeType     String?  // video/mp4, video/webm, etc.
  fileName     String?  // original filename
  fileSize     Int?     // file size in bytes
  userId       String?
  controls     Boolean  @default(true)
  height       Int      @default(1920)
  width        Int      @default(1080)
  quality      Int?     @default(100)
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  likes        Like[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Like {
  id      String @id @default(cuid())
  userId  String
  videoId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
}
